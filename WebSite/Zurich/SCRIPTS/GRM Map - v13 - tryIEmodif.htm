
<!DOCTYPE html>
<html>
<head>
	<title>June 2013 - Flood event</title>
	<meta charset="utf-8" />

	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />

	<link rel="stylesheet" href="SCRIPTS/leaflet.css" />
	<!--[if lte IE 8]><link rel="stylesheet" href="SCRIPTS/leaflet.ie.css" /><![endif]-->
	<script src="SCRIPTS/leaflet-src.js"></script>
	
	<link rel="stylesheet" href="SCRIPTS/MarkerCluster.css" />
	<link rel="stylesheet" href="SCRIPTS/MarkerCluster.Default.css" />
	<!--[if lte IE 8]><link rel="stylesheet" href="SCRIPTS/MarkerCluster.Default.ie.css" /><![endif]-->
	<script src="SCRIPTS/leaflet.markercluster-src.js"></script>
	<script src="SCRIPTS/realworld.389.js"></script>
	<script src="SCRIPTS/m3Wind.js"></script>
	<script src="SCRIPTS/m3Flood.js"></script>
	<style>

		.info {
			padding: 6px 8px;
			font: 14px/16px Arial, Helvetica, sans-serif;
			background: white;
			background: rgba(255,255,255,0.8);
			box-shadow: 0 0 15px rgba(0,0,0,0.2);
			border-radius: 5px;
		}
		.info h4 {
			margin: 0 0 5px;
			color: #777;
		}

		.legend {
			text-align: left;
			line-height: 18px;
			color: #555;
		}
		.legend i {
			width: 18px;
			height: 18px;
			float: left;
			margin-right: 8px;
			opacity: 0.7;
		} 
		
		body {
			padding: 0;
			margin: 0;
		}
		html, body, #map {
			height: 100%;
		}

		table
		{
			border-collapse:collapse;
			margin: 0 0 5px;
		}

		TD.fixed-TD120 {
			width: 120px;
		}
		
		TD.fixed-TD60 {
			width: 60px;
		}
		
		TD.fixed-TD40 {
			width: 40px;
		}
		
		TH.fixed-TH100 {
			width: 100px;
			border-bottom: 1px solid grey;
			border-top: 1px solid grey;
			border-collapse:collapse;
		}
		
		TH{
			border-bottom: 1px solid grey;
			border-top: 1px solid grey;
			border-collapse:collapse;
		}
	</style>
</head>
<body>
	<div id="map"></div>

	
	<script src="SCRIPTS/leaflet.js"></script> 
	<script src="SCRIPTS/leaflet.markercluster-src.js"></script>
	<script type="text/javascript">

		var flood = L.tileLayer('COUNTRIESFL/{z}/{x}/{y}.png', {
			maxZoom: 16,
			minZoom: 4});
		
		var satellite = L.tileLayer('SATELLITEBEL/{z}/{x}/{y}.jpg', {
			maxZoom: 16,
			minZoom: 4});
			
		
		var YELLOWIcon = L.icon({
			iconUrl: 'SCRIPTS/images/marker-icon-orange2.png',
			
			//iconSize:     [26, 26], // size of the icon
			iconAnchor:   [12, 41], // [12, 41] is the default
			popupAnchor:  [0, -30] // point from which the popup should open relative to the iconAnchor
		});

		var ORANGEIcon = L.icon({
			iconUrl: 'SCRIPTS/images/marker-icon-red3.png',
			
			//iconSize:     [26, 26], // size of the icon
			iconAnchor:   [12, 41], // [12, 41] is the default
			popupAnchor:  [0, -30] // point from which the popup should open relative to the iconAnchor
		});
		
		var REDIcon = L.icon({
			iconUrl: 'SCRIPTS/images/marker-icon-red2.png',
			
			//iconSize:     [26, 26], // size of the icon
			iconAnchor:   [12, 41], // [12, 41] is the default
			popupAnchor:  [0, -30] // point from which the popup should open relative to the iconAnchor
		});

		// control that shows state info on hover
		var info = L.control({position: 'bottomleft'});
		//var infoEQ = L.control({position: 'topleft'});

		info.onAdd = function (map) {
			this._div = L.DomUtil.create('div', 'info');
			this.update();
			return this._div;
		};
		
		//function to trunc a number
		truncMn0=function(x){
			//return Math.round(x/1000000000*10)/10
			return Math.round(x/1000000);
			};
		
		truncMn1=function(x){
			return Math.round(x/1000000*10)/10
			};
			
		trunck0=function(x){
			//return Math.round(x/1000000*10)/10
			return Math.round(x/1000);
			};
		
		prettyExpo=function(x){		
			return((x>1000000) ?truncMn1(x) + ' m€' : (x>1000) ?trunck0(x) + ' k€' : '< 1k€');
		};
		
	
		// get color depending on exposure value
		function getColor(d) {
			return d > 500000000000 ? '#800026' :
			       d > 200000000000  ? '#BD0026' :
			       d > 40000000000  ? '#E31A1C' :
			       d > 10000000000  ? '#FC4E2A' :
			       d > 2000000000   ? '#FD8D3C' :
			       d > 1000000000   ? '#FEB24C' :
			       d > 500000000   ? '#FED976' :
				   d > 100000000   ? '#FFEDA0' :
			                  '#EAEAEA';
		}

		// get color depending on exposure value
		function getColor2(d) {
			return d > 4.5 ? '#800026' :
			       d > 3.5  ? '#BD0026' :
			       d > 2.5  ? '#FC4E2A' :
			       d > 1.5   ? '#FEB24C' :
				   d > 0.5   ? '#FFEDA0' :
			                  '#EAEAEA';
		}


		//"layers" contains the layer that should be drawn initially

		
		var markers = L.markerClusterGroup();
		
		for (var i = 0; i < addressPoints.length; i++) {
			var a = addressPoints[i];
			var title = a[2];
			var exposure = a[3];
			if(exposure>1000000)
			{
				var marker = L.marker(new L.LatLng(a[0], a[1]), { title: title , icon: REDIcon} );
				//var marker2 = L.marker(new L.LatLng(a[0], a[1]), {title: title } );
				//marker2.addTo(map);
			}else if(exposure>100000)
			{
				var marker = L.marker(new L.LatLng(a[0], a[1]), { title: title , icon: ORANGEIcon} );

			}else
			{
				var marker = L.marker(new L.LatLng(a[0], a[1]), { title: title , icon: YELLOWIcon} );

			}
			marker.bindPopup("<b>Policy Name : </b>" + title + "<br />" + "<b>Exposures : </b>" + prettyExpo(exposure));
			markers.addLayer(marker);

		}

		var baseLayers = {
			"Flooded Areas": flood,
			"Satellite": satellite,
		};
		
		var overlays = {
			"Affected Sites": markers
		};
		
		var map = L.map('map', {layers: [flood, markers]}).setView([50.7365, 5.25], 5);
		map.attributionControl.addAttribution("Event Loss Report - Flood Event - June 2013");
		L.control.layers(baseLayers, overlays).addTo(map)
		
		
		function style(feature) {
			return {
				//width of the border of the country
				clickable:false,
				weight: 0,
				opacity: 1,
				//color the border of the country
				color: 'white',
				dashArray: '3',
				//Transparency
				fillOpacity: 0.7,
				fillColor: getColor2(feature.id)			
			};
		}
		
		
		geojson = L.geoJson(m3Flood, {
			//style understands in what colour to draw the polygon
			style: style,
			//clickable:false,
			//onEachFeature understands what is a country, A country corresponds to the "layer" argument of the 
			//onEachFeatureFunction
			//onEachFeature: onEachFeature
		});
		
		
		
		geojson.addTo(map);
		
		//var imageUrl = 'http://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg',
		//var imageUrl = 'C:/Users/asafa.PC-de-asafa/Desktop/Mon site internet/SCRIPTS/images/IND.png',
   // imageBounds = [[40, 5], [45.41, 11.91]];
	//imageBounds = [[60, 5], [65.41, 11.91]];
//L.imageOverlay(imageUrl, imageBounds).addTo(map);
		
		// define rectangle geographical bounds
		//var bounds = [[53.045, 8.6086], [53.19, 8.91]];
		// create an orange rectangle
		//L.rectangle(bounds, {color: 'red', weight: 4, opacity:0.8, fillOpacity:0}).addTo(map);
		
		//var bounds2 = [[52.6, 8.0], [53.6, 9.4]];
		// create an orange rectangle
		//L.rectangle(bounds2, {color: 'red', weight: 4, opacity:0, fillOpacity:0}).addTo(map);
		
		//var popup = L.popup()
		//.setLatLng([53.11, 8.792])
		//.setContent("Please zoom in this area")
		//.openOn(map);
		
		//, icon: axaIcon
		//map.addLayer(markers);

		
	</script>
</body>
</html>
